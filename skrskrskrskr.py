from sshtunnel import SSHTunnelForwarder
import psycopg2
from getpass import getpass
from prettytable import PrettyTable

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ssh_host = "u_h_name"
ssh_user = "root"
db_host = "localhost"
db_name = "db_nam"
db_user = "postgres"
db_port = 5432

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
ssh_password = getpass("üîê –ü–∞—Ä–æ–ª—å –æ—Ç SSH: ")
db_password = getpass("üîê –ü–∞—Ä–æ–ª—å –æ—Ç –ë–î: ")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SSH-—Ç—É–Ω–Ω–µ–ª—è
server = SSHTunnelForwarder(
    (ssh_host, 22),
    ssh_username=ssh_user,
    ssh_password=ssh_password,
    remote_bind_address=(db_host, db_port),
    local_bind_address=('127.0.0.1', 5433)
)

server.start()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = psycopg2.connect(
    database=db_name,
    user=db_user,
    password=db_password,
    host='127.0.0.1',
    port=server.local_bind_port
)
cur = conn.cursor()

def list_tables():
    cur.execute("""
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_type = 'BASE TABLE';
    """)
    tables = [row[0] for row in cur.fetchall()]
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
    for i, tbl in enumerate(tables):
        print(f"{i + 1}. {tbl}")
    return tables

def get_table_columns(table):
    cur.execute(f"SELECT column_name FROM information_schema.columns WHERE table_name = %s", (table,))
    return [row[0] for row in cur.fetchall()]

def display_table(table):
    cur.execute(f"SELECT * FROM {table}")
    rows = cur.fetchall()
    cols = [desc[0] for desc in cur.description]
    t = PrettyTable()
    t.field_names = cols
    for row in rows:
        t.add_row(row)
    print(t)

def insert_row(table, columns):
    values = []
    print("\n‚ûï –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:")
    for col in columns:
        val = input(f"{col}: ")
        values.append(val if val else None)
    placeholders = ', '.join(['%s'] * len(columns))
    query = f"INSERT INTO {table} ({', '.join(columns)}) VALUES ({placeholders})"
    cur.execute(query, values)
    conn.commit()
    print("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

def update_row(table, columns):
    print("\n‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ —É—Å–ª–æ–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: id = 1):")
    condition = input("WHERE: ")
    print("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –º–µ–Ω—è—Ç—å):")
    set_clauses = []
    values = []
    for col in columns:
        val = input(f"{col}: ")
        if val:
            set_clauses.append(f"{col} = %s")
            values.append(val)
    if not set_clauses:
        print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ.")
        return
    query = f"UPDATE {table} SET {', '.join(set_clauses)} WHERE {condition}"
    cur.execute(query, values)
    conn.commit()
    print("‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

def delete_row(table):
    condition = input("\nüóëÔ∏è –í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: id = 1): ")
    query = f"DELETE FROM {table} WHERE {condition}"
    cur.execute(query)
    conn.commit()
    print("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")

def main():
    try:
        tables = list_tables()
        index = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É (–Ω–æ–º–µ—Ä): ")) - 1
        table = tables[index]
        columns = get_table_columns(table)
        print(f"\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞–±–ª–∏—Ü—É: {table}")
        display_table(table)

        while True:
            print("\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?")
            print("1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
            print("2. –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
            print("3. –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")
            print("4. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
            print("5. –í—ã–π—Ç–∏")
            choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")

            if choice == "1":
                insert_row(table, columns)
            elif choice == "2":
                update_row(table, columns)
            elif choice == "3":
                delete_row(table)
            elif choice == "4":
                display_table(table)
            elif choice == "5":
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
    finally:
        cur.close()
        conn.close()
        server.stop()
        print("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == "__main__":
    main()
